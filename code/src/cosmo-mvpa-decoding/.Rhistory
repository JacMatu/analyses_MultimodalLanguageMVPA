# 1. Extract the Subject ID from the file path - DONE
# 2. Extract the meaningfull non-BIDS ROI label from the BIDS name - DONE
# 3. Split the Condition into Condition and Modality on capital letter - DONE
df.ROI.clean <- df.ROI.raw %>%
#Get the subject name from file path
mutate(Subject = str_split(File, "/", simplify = TRUE)[,9]) %>%
#Get the ROI label from ROI name
mutate(ROI_label = str_split(ROI_file, "_", simplify = TRUE)[,4]) %>%
mutate(ROI_label = gsub(pattern = 'label-', replacement = '', ROI_label)) %>%
#Get proper Condition and Modality names
group_by(Condition) %>%
mutate(Modality = unlist(str_split(Condition, "(?=[[:upper:]])"))[2]) %>%
mutate(Modality = recode(Modality, 'Read' = 'Reading')) %>%
mutate(Condition = unlist(str_split(Condition, "(?=[[:upper:]])"))[3]) %>%
ungroup() %>%
# Capitalize Group names for plotting functions
mutate(Group = sub("(.)", "\\U\\1", Group, perl=TRUE)) %>%
# Change condition names
mutate(Condition = recode(Condition, 'Word' = 'Words',
'Pseudoword' = 'Pseudowords')) %>%
# Drop the File and ROI_name from the df
dplyr::select(Subject, Group, Modality, Condition, ROI_label, ContrastEstimate)
df.ROI.summaries <-  df.ROI.clean %>%
group_by(Group,
ROI_label,
Modality,
Condition) %>%
dplyr::summarize(mean = mean(ContrastEstimate),
sd = sd(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')
df.ROI.summaries
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
#plot.roi.MTG <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'MTG')
#plot.roi.V1 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'V1')
#plot.roi.FG2 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'FG2')
#plot.roi.FG4 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'FG4')
roi_list <- unique(df.ROI.clean$ROI_label)
for(i in seq_along(roi_list)){
assign(paste0('plot.roi.', roi_list[i]),
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
#plot.roi.MTG <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'MTG')
#plot.roi.V1 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'V1')
#plot.roi.FG2 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'FG2')
#plot.roi.FG4 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'FG4')
roi_list <- unique(df.ROI.clean$ROI_label)
for(i in seq_along(roi_list)){
assign(paste0('plot.roi.', roi_list[i]),
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
?assign
roi_list <- unique(df.ROI.clean$ROI_label)
roi_list
for(i in seq_along(roi_list)){
assign(plot_temp,
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
for(i in seq_along(roi_list)){
assign('plot_temp',
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
plot.roi.FG4 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'FG4')
plot.roi.FG2 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'FG2')
plot.roi.V1 <-univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'V1')
plot.roi.MTG <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'MTG')
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
p1
p2
library(patchwork)
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
roi = roi_list[1]
data <- df.ROI.clean
blind_triple_colors <- c(rep(c(brewer.pal(3, "Pastel2")[1],
brewer.pal(3, "Set2")[1],
brewer.pal(3, "Dark2")[1]),2))
sighted_triple_colors <- c(rep(c(brewer.pal(3, "Pastel2")[2],
brewer.pal(3, "Set2")[2],
brewer.pal(3, "Dark2")[2]),2))
# Y Axis label for BOLD
bold_label <- "BOLD contrast estimate (a.u.)"
#legend_labels <- c('Control', 'Pseudowords', 'Words')
legend_labels <- c('C', 'PW', 'W')
groups <- unique(data$Group)
for(iGr in seq_along(groups)){
assign(paste0('p',iGr),
#Main plot
data %>%
## SUBSET THE DATA
filter(Group == groups[iGr]) %>%
filter(ROI_label == roi) %>%
mutate(Condition = factor(Condition, levels=c("Control", "Pseudowords", "Words"))) %>%
## ADD SUMMARIES - not needed for barplot?
group_by(Modality, Condition) %>%
summarise(mean = mean(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')) %>%
ungroup() %>%
## PLOT THAT PLOT
ggplot(aes(x = Modality, y = mean, group = interaction(Modality, Condition),
color = Condition)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_bar(stat = "summary",
fun = "mean",
position= "dodge",
color = "black",
linewidth = 1,
aes(fill = Condition)) +
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),
position=position_dodge(0.9),
width = 0.2,
linewidth = 1,
colour = 'black') +
scale_fill_manual(values = if(iGr == 1){
blind_triple_colors
}else{
sighted_triple_colors
},labels = legend_labels) +
ggtitle(label = groups[iGr]) +
scale_x_discrete(name = "Modality") +
theme_cowplot(font_family = "Arial") +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = 'black', size = 1),
axis.text = element_text(face="bold"),
#    legend.position = "none",
legend.title = element_blank(),
legend.position = 'bottom')
}
p1
p2
for(iGr in seq_along(groups)){
assign(paste0('p',iGr),
#Main plot
data %>%
## SUBSET THE DATA
filter(Group == groups[iGr]) %>%
filter(ROI_label == roi) %>%
mutate(Condition = factor(Condition, levels=c("Control", "Pseudowords", "Words"))) %>%
## ADD SUMMARIES - not needed for barplot?
group_by(Modality, Condition) %>%
summarise(mean = mean(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')) %>%
ungroup() %>%
## PLOT THAT PLOT
ggplot(aes(x = Modality, y = mean, group = interaction(Modality, Condition),
color = Condition)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_bar(stat = "summary",
fun = "mean",
position= "dodge",
color = "black",
size = 1,
aes(fill = Condition)) +
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),
position=position_dodge(0.9),
width = 0.2,
size = 1,
colour = 'black') +
scale_fill_manual(values = if(iGr == 1){
blind_triple_colors
}else{
sighted_triple_colors
},labels = legend_labels) +
ggtitle(label = groups[iGr]) +
scale_x_discrete(name = "Modality") +
theme_cowplot(font_family = "Arial") +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = 'black', size = 1),
axis.text = element_text(face="bold"),
#    legend.position = "none",
legend.title = element_blank(),
legend.position = 'bottom')
}
p1
p2
data %>%
## SUBSET THE DATA
filter(Group == groups[iGr]) %>%
filter(ROI_label == roi) %>%
mutate(Condition = factor(Condition, levels=c("Control", "Pseudowords", "Words"))) %>%
## ADD SUMMARIES - not needed for barplot?
group_by(Modality, Condition) %>%
summarise(mean = mean(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')) %>%
ungroup() %>%
## PLOT THAT PLOT
ggplot(aes(x = Modality, y = mean, group = interaction(Modality, Condition),
color = Condition)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_bar(stat = "summary",
fun = "mean",
position= "dodge",
color = "black",
size = 1,
aes(fill = Condition)) +
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),
position=position_dodge(0.9),
width = 0.2,
size = 1,
colour = 'black') +
scale_fill_manual(values = if(iGr == 1){
blind_triple_colors
}else{
sighted_triple_colors
},labels = legend_labels) +
ggtitle(label = groups[iGr]) +
scale_x_discrete(name = "Modality") +
theme_cowplot(font_family = "Arial") +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = 'black', size = 1),
axis.text = element_text(face="bold"),
#    legend.position = "none",
legend.title = element_blank(),
legend.position = 'bottom')
groups[iGr]
data %>%
## SUBSET THE DATA
filter(Group == groups[iGr]) %>%
filter(ROI_label == roi)
data %>%
## SUBSET THE DATA
filter(Group == groups[iGr]) %>%
filter(ROI_label == roi) %>%
mutate(Condition = factor(Condition, levels=c("Control", "Pseudowords", "Words"))) %>%
## ADD SUMMARIES - not needed for barplot?
group_by(Modality, Condition) %>%
summarise(mean = mean(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')) %>%
ungroup()
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
plot.roi.Broca <- univariate_fMRI_ROI_bars_both_gr(df.ROI.clean, roi = 'Broca')
plot.roi.Broca
roi_list <- unique(df.ROI.clean$ROI_label)
for(i in seq_along(roi_list)){
assign(paste0('plot.roi.', roi_list[i]),
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(cowplot)
library(RColorBrewer)
library(patchwork)
ffx <- 'beta' # beta tmap
#featRatio <- '0.8' #just for saving outputs?
#space <-'IXI549Space'
FWHM <- 2
groups <- c('blind', 'sighted') # blind or sighted
# set te path to the task folder
stats_dir <- '/Volumes/Slim_Reaper/Projects/Language_MVPA/outputs/derivatives/bidspm-stats'
decoding_label <- 'JuBrain'#'visfatlas' #'cVWFA' 'LexPerVWFA' 'JuBrain'
roi_file_dir <- paste(stats_dir, 'derivatives','bidspm-groupStats', sep = '/')
roi_file_name <- paste0(decoding_label, '_stats.csv')
roi_fpath <- paste(roi_file_dir, roi_file_name, sep = '/')
# EXPECTED STRUCTURE: LONG FORMAT WITH 1 COLUMN / ROI +
# Condition, Group, Modality, Subject
# Get the raw csv file from MATLAB output and name the columns
df.ROI.raw <- read_csv(roi_fpath, col_names = FALSE) %>%
rename(File = X1,
Group = X2,
ROI_file = X3,
Condition = X4,
ContrastEstimate = X5)
#Here you need to:
# 1. Extract the Subject ID from the file path - DONE
# 2. Extract the meaningfull non-BIDS ROI label from the BIDS name - DONE
# 3. Split the Condition into Condition and Modality on capital letter - DONE
df.ROI.clean <- df.ROI.raw %>%
#Get the subject name from file path
mutate(Subject = str_split(File, "/", simplify = TRUE)[,9]) %>%
#Get the ROI label from ROI name
mutate(ROI_label = str_split(ROI_file, "_", simplify = TRUE)[,4]) %>%
mutate(ROI_label = gsub(pattern = 'label-', replacement = '', ROI_label)) %>%
#Get proper Condition and Modality names
group_by(Condition) %>%
mutate(Modality = unlist(str_split(Condition, "(?=[[:upper:]])"))[2]) %>%
mutate(Modality = recode(Modality, 'Read' = 'Reading')) %>%
mutate(Condition = unlist(str_split(Condition, "(?=[[:upper:]])"))[3]) %>%
ungroup() %>%
# Capitalize Group names for plotting functions
mutate(Group = sub("(.)", "\\U\\1", Group, perl=TRUE)) %>%
# Change condition names
mutate(Condition = recode(Condition, 'Word' = 'Words',
'Pseudoword' = 'Pseudowords')) %>%
# Drop the File and ROI_name from the df
dplyr::select(Subject, Group, Modality, Condition, ROI_label, ContrastEstimate)
df.ROI.summaries <-  df.ROI.clean %>%
group_by(Group,
ROI_label,
Modality,
Condition) %>%
dplyr::summarize(mean = mean(ContrastEstimate),
sd = sd(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')
df.ROI.summaries
#load plotting functions
# REMEMBER THAT COLORS FOR BARS ARE CODED AS 'FILL' NOT 'COLOUR'
# Colour = border
# so for bars its scale_fill_manual not scale_colour_manual!
# source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
# Figure out how to address Y axis limits
# Adjust FONT SIZES for smaller plots!
# plot.blind.Broca <- univariate_fMRI_ROI_bars(df.ROI.clean,
#                                              roi = 'Broca',
#                                              sub_group = 'Blind')
# plot.sighted.Broca <-univariate_fMRI_ROI_bars(df.ROI.clean,
#                                              roi = 'Broca',
#                                              sub_group = 'Sighted')
#Equalize the Y axes
s
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(cowplot)
library(RColorBrewer)
library(patchwork)
ffx <- 'beta' # beta tmap
#featRatio <- '0.8' #just for saving outputs?
#space <-'IXI549Space'
FWHM <- 2
groups <- c('blind', 'sighted') # blind or sighted
# set te path to the task folder
stats_dir <- '/Volumes/Slim_Reaper/Projects/Language_MVPA/outputs/derivatives/bidspm-stats'
decoding_label <- 'JuBrain'#'visfatlas' #'cVWFA' 'LexPerVWFA' 'JuBrain'
roi_file_dir <- paste(stats_dir, 'derivatives','bidspm-groupStats', sep = '/')
roi_file_name <- paste0(decoding_label, '_stats.csv')
roi_fpath <- paste(roi_file_dir, roi_file_name, sep = '/')
# EXPECTED STRUCTURE: LONG FORMAT WITH 1 COLUMN / ROI +
# Condition, Group, Modality, Subject
# Get the raw csv file from MATLAB output and name the columns
df.ROI.raw <- read_csv(roi_fpath, col_names = FALSE) %>%
rename(File = X1,
Group = X2,
ROI_file = X3,
Condition = X4,
ContrastEstimate = X5)
#Here you need to:
# 1. Extract the Subject ID from the file path - DONE
# 2. Extract the meaningfull non-BIDS ROI label from the BIDS name - DONE
# 3. Split the Condition into Condition and Modality on capital letter - DONE
df.ROI.clean <- df.ROI.raw %>%
#Get the subject name from file path
mutate(Subject = str_split(File, "/", simplify = TRUE)[,9]) %>%
#Get the ROI label from ROI name
mutate(ROI_label = str_split(ROI_file, "_", simplify = TRUE)[,4]) %>%
mutate(ROI_label = gsub(pattern = 'label-', replacement = '', ROI_label)) %>%
#Get proper Condition and Modality names
group_by(Condition) %>%
mutate(Modality = unlist(str_split(Condition, "(?=[[:upper:]])"))[2]) %>%
mutate(Modality = recode(Modality, 'Read' = 'Reading')) %>%
mutate(Condition = unlist(str_split(Condition, "(?=[[:upper:]])"))[3]) %>%
ungroup() %>%
# Capitalize Group names for plotting functions
mutate(Group = sub("(.)", "\\U\\1", Group, perl=TRUE)) %>%
# Change condition names
mutate(Condition = recode(Condition, 'Word' = 'Words',
'Pseudoword' = 'Pseudowords')) %>%
# Drop the File and ROI_name from the df
dplyr::select(Subject, Group, Modality, Condition, ROI_label, ContrastEstimate)
df.ROI.summaries <-  df.ROI.clean %>%
group_by(Group,
ROI_label,
Modality,
Condition) %>%
dplyr::summarize(mean = mean(ContrastEstimate),
sd = sd(ContrastEstimate),
sem = sd(ContrastEstimate)/sqrt(n()),
.groups = 'keep')
df.ROI.summaries
#load plotting functions
# REMEMBER THAT COLORS FOR BARS ARE CODED AS 'FILL' NOT 'COLOUR'
# Colour = border
# so for bars its scale_fill_manual not scale_colour_manual!
# source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
# Figure out how to address Y axis limits
# Adjust FONT SIZES for smaller plots!
# plot.blind.Broca <- univariate_fMRI_ROI_bars(df.ROI.clean,
#                                              roi = 'Broca',
#                                              sub_group = 'Blind')
# plot.sighted.Broca <-univariate_fMRI_ROI_bars(df.ROI.clean,
#                                              roi = 'Broca',
#                                              sub_group = 'Sighted')
#Equalize the Y axes
s
rm(list = ls(pattern = '^plot.roi.'))
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
plot.point.test
plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
#TEST
plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
plot.point.test
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
#TEST
plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
plot.point.test
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
#TEST
#plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.bar.roi.', roi_list[i]),
univariate_fMRI_ROI_points_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
rm(plot.point.test)
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.bar.roi.', roi_list[i]),
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
#TEST
#plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.point.roi.', roi_list[i]),
univariate_fMRI_ROI_points_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
plot.point.roi.V1
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
#TEST
#plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.point.roi.', roi_list[i]),
univariate_fMRI_ROI_points_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.bar.roi.', roi_list[i]),
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
plot.bar.roi.V1
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.bar.roi.', roi_list[i]),
univariate_fMRI_ROI_bars_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
plot.bar.roi.V1
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
#For each roi in the DF
roi_list <- unique(df.ROI.clean$ROI_label)
#TEST
#plot.point.test <- univariate_fMRI_ROI_points_both_gr(df.ROI.clean, roi = roi_list[1])
# make a bar plot with 2 groups and equal Y axes
for(i in seq_along(roi_list)){
assign(paste0('plot.point.roi.', roi_list[i]),
univariate_fMRI_ROI_points_both_gr(df.ROI.clean,
roi = roi_list[i]))
}
plot.point.roi.V1
plot.bar.roi.FG2
plot.bar.roi.FG4
plot.bar.roi.FG2
plot.bar.roi.FG4
plot.bar.roi.FG4
plot.bar.roi.FG2
plot.bar.roi.FG2
plot.points.FG2
plot.point.FG2
